
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
      const GeneratedLocalizationsDelegate();

  static S of(BuildContext context) =>
      Localizations.of<S>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get EUROPE => "EUROPE";
  String get F1 => "F1";
  String get GOLF => "GOLF";
  String get INDY => "INDY";
  String get LIVETV => "TV GUIDE";
  String get MLB => "MLB";
  String get MLS => "MLS";
  String get MOVIES => "MOVIE GUIDE";
  String get NASCAR => "NASCAR";
  String get NBA => "NBA";
  String get NFL => "NFL";
  String get NHL => "NHL";
  String get TENNIS => "TENNIS";
  String get TV => "TV";
  String get UFC => "UFC";
  String get USA => "USA";
  String get WWE => "WWE";
  String get american_football => "AmericanFootball";
  String get baseball => "Baseball";
  String get basketball => "Basketball";
  String get boxing => "Boxing";
  String get fight => "fight";
  String get football => "Football";
  String get golf => "Golf";
  String get home => "Home";
  String get login => "Login";
  String get mall => "Mall";
  String get media => "Media";
  String get my => "My";
  String get password => "password";
  String get play_list => "Play List";
  String get signup => "SignUp";
  String get sports => "Sports";
  String get sports_guide => "Sports Guide";
  String get username => "username";
}

class en extends S {
  const en();
}

class zh extends S {
  const zh();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get MLB => "MLB";
  @override
  String get TV => "TV";
  @override
  String get GOLF => "GOLF";
  @override
  String get media => "影视";
  @override
  String get login => "登录";
  @override
  String get NBA => "NBA";
  @override
  String get password => "密码";
  @override
  String get basketball => "篮球";
  @override
  String get golf => "高尔夫";
  @override
  String get UFC => "UFC";
  @override
  String get NHL => "NHL";
  @override
  String get TENNIS => "TENNIS";
  @override
  String get NFL => "NFL";
  @override
  String get MLS => "MLS";
  @override
  String get INDY => "INDY";
  @override
  String get play_list => "播放列表";
  @override
  String get sports_guide => "赛程";
  @override
  String get fight => "搏击";
  @override
  String get NASCAR => "NASCAR";
  @override
  String get USA => "美国";
  @override
  String get sports => "运动";
  @override
  String get WWE => "WWE";
  @override
  String get MOVIES => "电影";
  @override
  String get mall => "商城";
  @override
  String get football => "足球";
  @override
  String get F1 => "F1";
  @override
  String get my => "我的";
  @override
  String get signup => "注册";
  @override
  String get home => "主页";
  @override
  String get EUROPE => "欧洲";
  @override
  String get american_football => "美式足球";
  @override
  String get LIVETV => "电视";
  @override
  String get boxing => "拳击";
  @override
  String get baseball => "棒球";
  @override
  String get username => "用户名";
}


class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[

      const Locale("en", ""),
      const Locale("zh", ""),

    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      final Locale languageLocale = new Locale(locale.languageCode, "");
      if (supported.contains(locale))
        return locale;
      else if (supported.contains(languageLocale))
        return languageLocale;
      else {
        final Locale fallbackLocale = fallback ?? supported.first;
        return fallbackLocale;
      }
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    switch (lang) {

      case "en":
        return new SynchronousFuture<WidgetsLocalizations>(const en());
      case "zh":
        return new SynchronousFuture<WidgetsLocalizations>(const zh());

      default:
        return new SynchronousFuture<WidgetsLocalizations>(const S());
    }
  }

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
